#!/bin/bash
if [ "$1" == "-h" ]||[ "$1" == "--help" ]||[ "$1" == "help" ] ; then echo '
########################################################################
# Script to gen armhf-kali-linux image for chromebook samsung xe303c12 #
# https://github.com/quarkscript/xe303c12_play_linux/                  #
#                                                                      #
# Based on Kali-ARM-Build-Scripts                                      #
# https://github.com/offensive-security/kali-arm-build-scripts         #
#                                                                      #
# Tested only on Kali linux x86_64 minimal. Probably                   #
# may work on Debian based distros (for rc-kernels).                   #
# Use:                                                                 #
# ./nakali ["", fsd, fsl, l, rc, fsrc] \                               #
#          ["custom root partition size"] \                            #
#          ["kernel rcn-patch"] ["" "btrfs" "f2fs"]                    #
# All params are optional.                                             #
#                                                                      #
# To rebuild disk image and kernel but not whole arm system just run   #
# this script next time with first parameter "fsd" (fsl or fsrc)       #
# config can be adjusted as needed, it does not affect previous stages #
# rc - release candidate kernel, l -local, d -default (src from kali); #
# kernel rcn patch = a name of patch file                              #
#                                                                      #
# Req. dep. will be installed automatically,                           #
# root privileges are required. To skip some params you may use ""     #
########################################################################'
    exit 0
fi

## checks
if [ ! -z "$1" ]&&[ "$1" != "rc" ]&&[ "$1" != "fsrc" ]&&[ "$1" != "fsd" ]&&[ "$1" != "l" ]&&[ "$1" != "fsl" ]; then
    echo "First param can be one of those: 'rc', 'fsrc', '', 'fsd', 'l', 'fsl'"
    echo "'' - build whole system, image and kernel ( kernel source from Kali repo)"
    echo "fsd - build only kernel and image (final stage)"
    echo "rc - build whole system with release candidate kernel source (Linus Torvalds git)"
    echo "fsrc - final stage for rc kernel"
    echo "l - build whole system and kernel from local kernel source archive"
    echo "fsl - final stage for local placed kernel source archive"
    exit 1
fi
if [ ! -z "$2" ]; then
    if [ "$2" -gt "4" ]&&[ "$2" -lt "129" ];then
		dis=$(($2*1024+0))
	elif [ "$2" -gt "5119" ]&&[ "$2" -lt "131093" ]; then
		dis=$(($2+0))
	else
		echo "$2 out of range"
		echo "Disk image size is allowed at 5-128 (G) or 5120-131092 (M)"
		echo "or empty '' means default size (8 G). Root partition offset is 20Mb"
		echo "to set a disk image size use only numbers from that intervals"
		exit 1
	fi
else 
	dis=$((8*1024))
	echo "Default disk image size is 8 (G)"
fi

if [ ! -e "config" ];then
	wget https://raw.githubusercontent.com/quarkscript/xe303c12_play_linux/master/config
fi
if [ ! -e "config" ];then
	echo "config - kennel config not found, it must be in the same dir as this script"
	exit 1
fi
if [ ! -z "$4" ]&&[ "$4" != "btrfs" ]&&[ "$4" != "f2fs" ]; then
    echo "allowed filesystems for root partition are ''-ext4 'btrfs' 'f2fs'"
	exit 1
fi

basedir="$(pwd)/kali-exynos"
mirror=http.kali.org
architecture="armhf"

if [ -z "$1" ]||[ "$1" == "rc" ]||[ "$1" == "l" ]; then
    LANG=C apt list --installed | sed 's/\/.*//g'>/tmp/aptlist
    need_install=""
    for i in git-core gnupg flex bison gperf build-essential zip curl libncurses5-dev zlib1g-dev gcc g++ parted kpartx debootstrap pixz qemu-user-static abootimg cgpt vboot-kernel-utils vboot-utils u-boot-tools bc lzma lzop automake autoconf m4 dosfstools rsync schedtool git dosfstools e2fsprogs device-tree-compiler libssl-dev qemu-user-static btrfs-progs f2fs-tools binutils binutils-arm-linux-gnueabihf gcc-arm-linux-gnueabihf; do
        if ! $(grep $i /tmp/aptlist -q); then 
            need_install+="$i "
        fi
    done
    rm -f /tmp/aptlist
    if [ "$need_install" != "" ]; then
        apt-get install -y $need_install
        if [ "$(uname -m)" == 'x86_64' ]; then
            dpkg --add-architecture i386
            apt-get update
            apt-get install -y libstdc++6:i386 libgcc1:i386 zlib1g:i386 libncurses5:i386
        else
            apt-get install -y libncurses5
        fi
        apt autoremove -y
    fi
    packages="ntpdate curl apt-transport-https apt-utils bash-completion console-setup dialog e2fsprogs ifupdown initramfs-tools iw man-db net-tools wget libnss-systemd libssl-dev btrfs-progs f2fs-tools aptitude mc rfkill usbutils whiptail base0files login tmux wpasupplicant mlocate netcat-traditional parted psmisc screen tmux unrar wget zerofree kali-desktop-xfce kali-root-login xserver-xorg-video-fbdev xserver-xorg-input-libinput xserver-xorg-input-synaptics xfonts-terminus xinput alsa-utils bc bison crda bluez  triggerhappy"
    
    # Set this to use an http proxy, like apt-cacher-ng, and uncomment further down
    # to unset it.
    #export http_proxy="http://localhost:3142/"
    mkdir -p ${basedir}
    cd ${basedir}
    debootstrap --foreign --arch $architecture kali-rolling kali-$architecture http://$mirror/kali |& tee debootstrap.log
    if $(cat debootstrap.log | grep -q "Couldn't download package" -m 1); then
        echo ''
        echo 'Restart debootstrap'
        echo ''
        debootstrap --foreign --arch $architecture kali-rolling kali-$architecture http://$mirror/kali |& tee debootstrap.log
    fi
    if $(cat debootstrap.log | grep -q "Couldn't download package" -m 1); then
        echo ''
        echo 'Restart debootstrap'
        echo ''
        debootstrap --foreign --arch $architecture kali-rolling kali-$architecture http://$mirror/kali |& tee debootstrap.log
    fi
    if $(cat debootstrap.log | grep -q "Couldn't download package" -m 1); then
        echo "seems some problems with network or repos; try to run $0 later"
        exit 1
    fi
    cp /usr/bin/qemu-arm-static kali-$architecture/usr/bin/
    LANG=C chroot kali-$architecture /debootstrap/debootstrap --second-stage
    # Create sources.list
cat << EOF > kali-$architecture/etc/apt/sources.list
deb http://$mirror/kali kali-rolling main contrib non-free
EOF
    echo "kali" > kali-$architecture/etc/hostname
cat << EOF > kali-$architecture/etc/hosts
127.0.0.1       kali    localhost
::1             localhost ip6-localhost ip6-loopback
fe00::0         ip6-localnet
ff00::0         ip6-mcastprefix
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters
EOF
cat << EOF > kali-$architecture/etc/network/interfaces
auto lo
iface lo inet loopback
EOF
cat << EOF > kali-$architecture/etc/resolv.conf
nameserver 1.1.1.1
EOF
    export MALLOC_CHECK_=0 # workaround for LP: #520465
    export LC_ALL=C
    export DEBIAN_FRONTEND=noninteractive
    mount -t proc proc kali-$architecture/proc
    mount -o bind /dev/ kali-$architecture/dev/
    mount -o bind /dev/pts kali-$architecture/dev/pts
cat << EOF > kali-$architecture/debconf.set
console-common console-data/keymap/policy select Select keymap from full list
console-common console-data/keymap/full select en-latin1-nodeadkeys
EOF
	tmpvar1='$(grep -xq $i /tmp/aptlist)'
	paclist='$paclist'
	i='$i'
	
	check_mkl='$(cat aptgetmainpkg.log | grep -q --regexp="Cannot initiate the connection" --regexp="Unable to connect" -m 1)'
cat << EOF > kali-$architecture/third-stage
#!/bin/bash
dpkg-divert --add --local --divert /usr/sbin/invoke-rc.d.chroot --rename /usr/sbin/invoke-rc.d
cp /bin/true /usr/sbin/invoke-rc.d
echo -e "#!/bin/sh\nexit 101" > /usr/sbin/policy-rc.d
chmod +x /usr/sbin/policy-rc.d

apt-get update
apt-get --yes --force-yes install locales-all

debconf-set-selections /debconf.set
rm -f /debconf.set
apt-get update

apt-get -y -d install git-core binutils ca-certificates initramfs-tools u-boot-tools |& tee aptgetmainpkg.log
if $check_mkl; then
   apt-get -y -d install git-core binutils ca-certificates initramfs-tools u-boot-tools |& tee aptgetmainpkg.log
   sleep 5
fi
if $check_mkl; then
   apt-get -y -d install git-core binutils ca-certificates initramfs-tools u-boot-tools |& tee aptgetmainpkg.log
fi
apt-get -y install git-core binutils ca-certificates initramfs-tools u-boot-tools

apt-get -y -d install locales console-common less nano git
if $check_mkl; then
   apt-get -y -d install locales console-common less nano git |& tee aptgetmainpkg.log
   sleep 5
fi
if $check_mkl; then
   apt-get -y -d install locales console-common less nano git |& tee aptgetmainpkg.log
fi
apt-get -y install locales console-common less nano git

echo "root:toor" | chpasswd
sed -i -e 's/KERNEL\!=\"eth\*|/KERNEL\!=\"/' /lib/udev/rules.d/75-persistent-net-generator.rules
rm -f /etc/udev/rules.d/70-persistent-net.rules
export DEBIAN_FRONTEND=noninteractive

## check and remove from install list unavailable packages
paclist=""
LANG=C apt list | sed 's/\/.*//g' >/tmp/aptlist
for i in $packages; do
	if $tmpvar1; then 
		paclist+="$i "
	else 
		echo $i " is unavailable, it will be ignored during install"
	fi
done

rm -f /tmp/aptlist

apt-get --yes --force-yes -d install $paclist |& tee aptgetmainpkg.log
sleep 5
if $check_mkl; then
   apt-get --yes --force-yes -d install $paclist |& tee aptgetmainpkg.log
fi
sleep 5
if $check_mkl; then
   apt-get --yes --force-yes -d install $paclist |& tee aptgetmainpkg.log
fi
sleep 5
if $check_mkl; then
   apt-get --yes --force-yes -d install $paclist |& tee aptgetmainpkg.log
fi
sleep 5
if $check_mkl; then
   apt-get --yes --force-yes -d install $paclist |& tee aptgetmainpkg.log
fi
if $check_mkl; then
   echo ''
   echo 'Something wrong with network or repos. Some packages will be missed.'
   echo ''
fi
apt-get --yes --force-yes install $paclist
apt-get --yes --force-yes dist-upgrade
apt-get --yes --force-yes autoremove

rm -f /usr/sbin/policy-rc.d
rm -f /usr/sbin/invoke-rc.d
dpkg-divert --remove --rename /usr/sbin/invoke-rc.d

rm -f /third-stage


# download firmwares
if [ ! -d /usr/lib/firmware ]; then
    mkdir -p /usr/lib/firmware
fi
# samsung
if [ ! -f /usr/lib/firmware/s5p-mfc.fw ]; then
    curl -o /usr/lib/firmware/s5p-mfc.fw https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/s5p-mfc.fw
fi
if [ ! -f /usr/lib/firmware/s5p-mfc-v6-v2.fw ]; then
    curl -o /usr/lib/firmware/s5p-mfc-v6-v2.fw https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/s5p-mfc-v6-v2.fw
fi
if [ ! -f /usr/lib/firmware/s5p-mfc-v6.fw ]; then
    curl -o /usr/lib/firmware/s5p-mfc-v6.fw https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/s5p-mfc-v6.fw
fi
if [ ! -f /usr/lib/firmware/s5p-mfc-v7.fw ]; then
    curl -o /usr/lib/firmware/s5p-mfc-v7.fw https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/s5p-mfc-v7.fw
fi
if [ ! -f /usr/lib/firmware/s5p-mfc-v8.fw ]; then
    curl -o /usr/lib/firmware/s5p-mfc-v8.fw https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/s5p-mfc-v8.fw
fi
if [ ! -d /usr/lib/firmware/mrvl ]; then
    mkdir -p /usr/lib/firmware/mrvl
fi
# marvel
if [ ! -f /usr/lib/firmware/mrvl/sd8787_uapsta.bin ]; then
    curl -o /usr/lib/firmware/mrvl/sd8787_uapsta.bin https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/mrvl/sd8787_uapsta.bin
fi
if [ ! -f /usr/lib/firmware/mrvl/sd8797_uapsta.bin ]; then
    curl -o /usr/lib/firmware/mrvl/sd8797_uapsta.bin https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/mrvl/sd8797_uapsta.bin
fi
if [ ! -f /usr/lib/firmware/mrvl/sd8897_uapsta.bin ]; then
    curl -o /usr/lib/firmware/mrvl/sd8897_uapsta.bin https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git/plain/mrvl/sd8897_uapsta.bin
fi
sleep 5

EOF
    chmod +x kali-$architecture/third-stage
    LANG=C chroot kali-$architecture /third-stage
cat << EOF > kali-$architecture/cleanup
#!/bin/bash
rm -rf /root/.bash_history
apt-get update
apt-get clean
rm -f /0
rm -f /hs_err*
rm -f cleanup
rm -f /usr/bin/qemu*
EOF
    chmod +x kali-$architecture/cleanup
    LANG=C chroot kali-$architecture /cleanup
    umount kali-$architecture/proc/sys/fs/binfmt_misc
    umount kali-$architecture/dev/pts
    umount kali-$architecture/dev/
    umount kali-$architecture/proc
else
    umount /dev/mapper/loop0p2
    umount ${basedir}/root
    rm -rf ${basedir}/root
    rm -f ${basedir}/kali-$1-exynos.img
    rm -f ${basedir}/kernel.bin
    cd ${basedir}
fi
## final stages
echo "Creating image file for Exynos-based Samsung XE303C12 Chromebook"
dd if=/dev/zero of=${basedir}/kali-exynos.img bs=1M count=$dis
parted kali-exynos.img --script -- mklabel gpt
cgpt create -z kali-exynos.img
cgpt create kali-exynos.img
cgpt add -i 1 -t kernel -b 8192 -s 32768 -l kernel -S 1 -T 5 -P 10 kali-exynos.img
cgpt add -i 2 -t data -b 40960 -s `expr $(cgpt show kali-exynos.img | grep 'Sec GPT table' | awk '{ print \$1 }')  - 40960` -l Root kali-exynos.img
loopdevice=`losetup -f --show ${basedir}/kali-exynos.img`
device=`kpartx -va $loopdevice| sed -E 's/.*(loop[0-9])p.*/\1/g' | head -1`
sleep 5
device="/dev/mapper/${device}"
bootp=${device}p1
rootp=${device}p2

mkdir -p ${basedir}/root
if [ "$4" == "btrfs" ]; then
    mkfs.btrfs -f --label rootfs $rootp
    mount $rootp ${basedir}/root -o,compress,space_cache
elif [ "$4" == "f2fs" ]; then
    mkfs.f2fs -f -O 'extra_attr flexible_inline_xattr compression encrypt ' -l rootfs $rootp
    mount $rootp ${basedir}/root -o,compress_algorithm=lzo,compress_extension=*
else
    mkfs.ext4 -O ^flex_bg -O ^metadata_csum -L rootfs $rootp
    mount $rootp ${basedir}/root
fi

rootuuid=$(LANG=C blkid | grep "$rootp" | grep 'LABEL="rootfs"' | sed 's/.* UUID="//g' | sed 's/".*//g')
echo "Rsyncing rootfs into image file"
rsync -HPavz -q ${basedir}/kali-$architecture/ ${basedir}/root/
cat << EOF > ${basedir}/root/etc/apt/sources.list
deb http://http.kali.org/kali kali-rolling main contrib non-free
deb-src http://http.kali.org/kali kali-rolling main contrib non-free
EOF
if [ "$4" == "btrfs" ]; then
cat << EOF> ${basedir}/root/etc/fstab
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
# / was on /dev/sda2 during installation
UUID=$rootuuid /               btrfs    rw,noatime,compress=zstd,space_cache,autodefrag,ssd 0       0
# swap was on /dev/sdaX during installation
#UUID= none            swap    sw              0       0
#/dev/sr0        /media/cdrom0   udf,iso9660 user,noauto     0       0
EOF
elif [ "$4" == "f2fs" ]; then
cat << EOF> ${basedir}/root/etc/fstab
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
# / was on /dev/sda2 during installation
UUID=$rootuuid /               f2fs    rw,noatime,compress_algorithm=zstd,compress_extension=* 0       1
# swap was on /dev/sdaX during installation
#UUID= none            swap    sw              0       0
#/dev/sr0        /media/cdrom0   udf,iso9660 user,noauto     0       0
EOF
else
cat << EOF> ${basedir}/root/etc/fstab
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
# / was on /dev/sda2 during installation
UUID=$rootuuid /               ext4    rw,noatime 0       1
# swap was on /dev/sdaX during installation
#UUID= none            swap    sw              0       0
#/dev/sr0        /media/cdrom0   udf,iso9660 user,noauto     0       0
EOF
fi

export CROSS_COMPILE=arm-linux-gnueabihf-
export ARCH=arm
if $(echo $1 | grep rc -q); then
	git clone https://github.com/torvalds/linux ${basedir}/linux
	rm -rf ${basedir}/linux/.git
	mv -f ${basedir}/linux ${basedir}/root/usr/src/kernel
	#rm -rf ${basedir}/linux
	cd ${basedir}/root/usr/src/kernel
	cp ${basedir}/../config .config
elif $(echo $1 | grep l -q); then
    tar -xf ${basedir}/../linux*tar.xz -C ${basedir}/root/usr/src/
	mv -f ${basedir}/root/usr/src/linux* ${basedir}/root/usr/src/kernel
	#rm -rf ${basedir}/root/usr/src/linux*
	cd ${basedir}/root/usr/src/kernel
	cp ${basedir}/../config .config
	curl -o ${basedir}/root/usr/src/kernel/9_kali_inject.patch https://gitlab.com/kalilinux/build-scripts/kali-arm/-/raw/master/patches/kali-wifi-injection-5.9.patch
else
	tar -xf /usr/src/linux*tar.xz -C ${basedir}/root/usr/src/
	mv -f ${basedir}/root/usr/src/linux* ${basedir}/root/usr/src/kernel
	#rm -rf ${basedir}/root/usr/src/linux*
	cd ${basedir}/root/usr/src/kernel
	if [ -f /usr/src/patch*xz ]; then
        xz -d /usr/src/linux*patch*xz
        mv -f *.patch 0_kernel.patch
	fi
	cp ${basedir}/../config .config
fi

# apply patches
if [ ! -z "$3" ]&&[ -f "${basedir}/../$3" ]; then
    cp "${basedir}/../$3" 8_rcnee.patch
fi
for ptch in *patch; do
    git apply $ptch
done

if $(echo $1 | grep rc -q); then
    make menuconfig
fi

echo '
forcing custom optimization flags
'
for tmpcycle in $(find -name Makefile); do
    sed -i "s/armv7-a/armv7-a+mp+neon-vfpv4  --param l1-cache-size=64 --param l2-cache-size=1024 -faggressive-loop-optimizations -fguess-branch-probability -floop-nest-optimize -fomit-frame-pointer -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops -fpredictive-commoning -fprefetch-loop-arrays -ftree-loop-optimize /g" $tmpcycle
    sed -i "s/vfpv /vfpv4 /g" $tmpcycle
    sed -i "s/vfpv,/vfpv4,/g" $tmpcycle
    sed -i "s/-O2/-O2 --param l1-cache-size=64 --param l2-cache-size=1024 -faggressive-loop-optimizations -fguess-branch-probability -floop-nest-optimize -fomit-frame-pointer -fsel-sched-pipelining -fsel-sched-pipelining-outer-loops -fpredictive-commoning -fprefetch-loop-arrays -ftree-loop-optimize /g" $tmpcycle
done

make -j$(($(grep -c processor /proc/cpuinfo)+1)) zImage modules dtbs
make modules_install INSTALL_MOD_PATH=${basedir}/root
make headers_install INSTALL_HDR_PATH=${basedir}/root/usr

mkdir ${basedir}/root/boot/dtbs/
cp -f arch/arm/boot/dts/exynos5250-snow.dtb ${basedir}/root/boot/dtbs/exynos5250-snow.dtb
cp -f arch/arm/boot/dts/exynos5250-snow-rev5.dtb ${basedir}/root/boot/dtbs/exynos5250-snow-rev5.dtb
cp -f arch/arm/boot/zImage ${basedir}/root/boot/zImage 
cp -f arch/arm/boot/zImage ${basedir}/zImage 
cp .config ${basedir}/../config_w
cd ${basedir}/root/usr/src/kernel/arch/arm/boot
cat << __EOF__ > ${basedir}/root/usr/src/kernel/arch/arm/boot/kernel-exynos.its
/dts-v1/;
 
/ {
    description = "Chrome OS kernel image with one or more FDT blobs";
    images {
        kernel@1{
            description = "kernel";
            data = /incbin/("zImage");
            type = "kernel_noload";
            arch = "arm";
            os = "linux";
            compression = "none";
            load = <0>;
            entry = <0>;
        };
        fdt@1{
            description = "exynos5250-snow.dtb";
            data = /incbin/("dts/exynos5250-snow.dtb");
            type = "flat_dt";
            arch = "arm";
            compression = "none";
            hash@1{
                algo = "sha1";
            };
        };
        fdt@2{
            description = "exynos5250-snow-rev5.dtb";
            data = /incbin/("dts/exynos5250-snow-rev5.dtb");
            type = "flat_dt";
            arch = "arm";
            compression = "none";
            hash@1{
                algo = "sha1";
            };
        };
    };
    configurations {
        default = "conf@1";
        conf@1{
            kernel = "kernel@1";
            fdt = "fdt@1";
        };
        conf@2{
            kernel = "kernel@1";
            fdt = "fdt@2";
        };
    };
};

__EOF__

echo 'console=tty0 root=PARTUUID=%U/PARTNROFF=1 zswap.compressor=zstd zswap.max_pool_percent=40' > cmdline

mkimage -D "-I dts -O dtb -p 2048" -f kernel-exynos.its exynos-kernel
# Pulled from ChromeOS, this is exactly what they do because there's no
# bootloader in the kernel partition on ARM.
dd if=/dev/zero of=bootloader.bin bs=512 count=1
vbutil_kernel --arch arm --pack ${basedir}/kernel.bin --keyblock /usr/share/vboot/devkeys/kernel.keyblock --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk --version 1 --config cmdline --bootloader bootloader.bin --vmlinuz exynos-kernel
cp -f ${basedir}/kernel.bin ${basedir}/root/boot/vmlinux.kpart
cd ${basedir}/root/usr/src/kernel/
make mrproper
cp ${basedir}/../config_w .config
rm -f ${basedir}/../config_w
make modules_prepare
cd ${basedir}
# Fix up the symlink for building external modules
# kernver is used so we don't need to keep track of what the current compiled
# version is
kernver=$(ls ${basedir}/root/lib/modules/)
cd ${basedir}/root/lib/modules/$kernver
rm build
rm source
ln -s /usr/src/kernel build
ln -s /usr/src/kernel source
cd ${basedir}
# Bit of a hack to hide eMMC partitions from XFCE
#cat << EOF > ${basedir}/root/etc/udev/rules.d/99-hide-emmc-partitions.rules
#KERNEL=="mmcblk0*", ENV{UDISKS_IGNORE}="1"
#EOF
# Disable uap0 and p2p0 interfaces in NetworkManager
#printf '\n[keyfile]\nunmanaged-devices=interface-name:p2p0\n' >> ${basedir}/root/etc/NetworkManager/NetworkManager.conf
# Touchpad configuration
mkdir -p ${basedir}/root/etc/X11/xorg.conf.d
cat << EOF > ${basedir}/root/etc/X11/xorg.conf.d/10-synaptics-chromebook.conf
Section "InputClass"
	Identifier		"touchpad"
	MatchIsTouchpad		"on"
	Driver			"synaptics"
	Option			"TapButton1"	"1"
	Option			"TapButton2"	"3"
	Option			"TapButton3"	"2"
	Option			"FingerLow"		"15"
	Option			"FingerHigh"	"20"
	Option			"FingerPress"	"256"
EndSection
EOF
	# Mali GPU rules aka mali-rules package in ChromeOS
cat << EOF > ${basedir}/root/etc/udev/rules.d/50-mali.rules
KERNEL=="mali0", MODE="0660", GROUP="video"
EOF
	# Video rules aka media-rules package in ChromeOS
cat << EOF > ${basedir}/root/etc/udev/rules.d/50-media.rules
ATTR{name}=="s5p-mfc-dec", SYMLINK+="video-dec"
ATTR{name}=="s5p-mfc-enc", SYMLINK+="video-enc"
ATTR{name}=="s5p-jpeg-dec", SYMLINK+="jpeg-dec"
ATTR{name}=="exynos-gsc.0*", SYMLINK+="image-proc0"
ATTR{name}=="exynos-gsc.1*", SYMLINK+="image-proc1"
ATTR{name}=="exynos-gsc.2*", SYMLINK+="image-proc2"
ATTR{name}=="exynos-gsc.3*", SYMLINK+="image-proc3"
EOF

cd ${basedir}
sed -i -e 's/^#PermitRootLogin.*/PermitRootLogin yes/' ${basedir}/root/etc/ssh/sshd_config
# Unmount partitions
umount $rootp
dd if=${basedir}/kernel.bin of=$bootp
kpartx -dv $loopdevice
losetup -d $loopdevice
echo '
if all complete without errors you can write result image with dd, for example:
dd if=kali-exynos/kali-exynos.img \
of=/dev/"flash stick" bs=8M status=progress

Be aware! Wrong /dev/"flash stick" can permanently destroy data on hard drives!
'
# Clean up all the temporary build stuff and remove the directories will be not done
# It allow rebuild kernel and/or image without redownload arm packages
# if you need remove it, do it manually
#echo "Removing temporary build files"
#rm -rf ${basedir}/kernel ${basedir}/kernel.bin ${basedir}/root ${basedir}/kali-$architecture ${basedir}/patches ${basedir}/bootloader.bin
