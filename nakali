#!/bin/bash
if [ "$1" == "-h" ] ; then echo '
########################################################################
# Script to gen armhf-kali-linux image for chromebook samsung xe303c12 #
# https://github.com/quarkscript/xe303c12_play_linux/                  #
#                                                                      #
# Based on Kali-ARM-Build-Scripts                                      #
# https://github.com/offensive-security/kali-arm-build-scripts         #
#                                                                      #
# Tested only on Kali linux x86 light. Probably may work on Debian-    #
# based distros. Use:                                                  #
# ./nakali "version number" ["", fsd, p, fsp, rc, fsrc] \              #
#   "custom root partition size" "non default cross compiler path" \   #
#   "non default cross compiler prefix" "peach kernel release"         #
# All params except "version number" are optional.                     #
#                                                                      #
# To rebuild disk image and kernel but not whole arm system just run   #
# this script next time with second parameter "fsd" (fsrc, fsp)        #
# config can be adjusted as needed, it does not affect previous stages #
#                                                                      #
# Req. dep. will be installed automatically, except old ccc for peach  #
# root privileges are required. To skip some params you may use ""     #
########################################################################'
    exit 1
fi

## checks
if [ -z "$1" ] ; then
    echo "Please pass version number, e.g. $0 2.0"
    echo "... or $0 -h for a little help"
    exit 1
fi
if [ ! -z "$2" ]&&[ "$2" != "rc" ]&&[ "$2" != "fsrc" ]&&[ "$2" != "fsd" ]&&[ "$2" != "fsp" ]&&[ "$2" != "p" ]; then
    echo "Second param can be one of those: 'rc', 'fsrc', 'p' 'fsp', '', 'fsd'"
    echo "fs means final stage: gen disk image + build and install kernel only"
    echo "rc - release candidate kernel source (Linus Torvalds git)"
    echo "d  - default kernel source (host repo, can be used only as part of 'fsd' or '')"
    echo "p  - 'peach' kernel its a 3.8 chromeos kernel"
    exit 1
fi
if [ ! -z "$3" ]; then
    if [ "$3" -gt "4" ]&&[ "$3" -lt "16" ];then
		dis=$(($3*1024+20))
	elif [ "$3" -gt "5119" ]&&[ "$3" -lt "16364" ]; then
		dis=$(($3+20))
	else
		echo "$3 out of range"
		echo "Custom root partition size is allowed at 5-15 (G) or 5120-16363 (M)"
		echo "or empty '' means default size (7 G). Root partition offset is 20Mb"
		echo "to set a root partition size use only numbers from that intervals"
		exit 1
	fi
else 
	dis=$((7*1024+20))
	echo "Default root partiton size is 7 (G)"
fi
if [ ! -e "config" ]&&[ ! "$(echo $2 | grep p -q)" ];then
	echo "config - kennel config not found, it must be in the same dir as this script"
	exit 1
elif [ ! -e "peach.patch" ]&&[ ! -e "config_p" ]&&[ "$(echo $2 | grep p -q)" ];then
	echo "config_p and/or peach.patch not found, it must be in the same dir as this script"
	exit 1
fi
if $(echo $2 | grep p -q)&&[ -z "$4" ]; then
echo '"peach" kernel - chrome os kernel 3.8, it can be compiled succesful with an 
gcc 4.x or 5.x cross compiler only, you may try with modern but it will fail.
You can obtain some of 4.x or 5.x from next links:
https://releases.linaro.org/components/toolchain/binaries/latest-4/arm-linux-gnueabihf/
https://releases.linaro.org/components/toolchain/binaries/latest-5/arm-linux-gnueabihf/
Extract cross compiler to any folder. Prefix will be "arm-linux-gnueabihf-"
Run script command may be like (do not forget use your own path to cross gcc):
./nakali 1.0 p "" "path to crocc gcc/bin/" "arm-linux-gnueabihf-"'
exit 1
fi
if [ ! -z "$4" ]; then
	export PATH="$4":${PATH}
	if [ ! -z "$5" ]; then
		ccc=$5
	else
		ccc="arm-linux-gnueabihf-"
	fi
	export CROSS_COMPILE=$ccc
	"$ccc"gcc -v
	if [ ! $? -eq 0 ]; then
		echo 'Missing cross compiler. Add the right "nondefault cross compiler path" and '
		echo '"nondefault cross compiler prefix" params'
		exit 1
	fi
	unset CROSS_COMPILE
else
	export PATH=${PATH}:/usr/bin/
fi
if $(echo $2 | grep p -q)&&[ -z "$6" ]; then
	kernel_release="R65-10323.B-chromeos-3.8"
	echo 'peach kernel release is not specified so will be used last known'
	echo 'somehow works kernel release "'$kernel_release'"'
	echo 'For another ver. you can consult with'
	echo 'https://chromium.googlesource.com/chromiumos/third_party/kernel/+refs'
fi

basedir=`pwd`/kali-exynos-$1
mirror=http.kali.org
architecture="armhf"

if [ -z "$2" ]||[ "$2" == "rc" ]||[ "$2" == "p" ]; then
    LANG=C apt list --installed | sed 's/\/.*//g'>/tmp/aptlist
    need_install=""
    for i in git-core gnupg flex bison gperf build-essential zip curl libncurses5-dev zlib1g-dev gcc g++ parted kpartx debootstrap pixz qemu-user-static abootimg cgpt vboot-kernel-utils vboot-utils u-boot-tools bc lzma lzop automake autoconf m4 dosfstools rsync schedtool git dosfstools e2fsprogs device-tree-compiler libssl-dev qemu-user-static btrfs-progs binutils binutils-arm-linux-gnueabihf gcc-arm-linux-gnueabihf linux-source; do
        if ! $(grep $i /tmp/aptlist -q); then 
            need_install+="$i "
        fi
    done
    rm -f /tmp/aptlist
    if [ "$need_install" != "" ]; then
        apt-get install -y $need_install
        MACHINE_TYPE=`uname -m`
        if [ "${MACHINE_TYPE}" == 'x86_64' ]; then
            dpkg --add-architecture i386
            apt-get update
            apt-get install -y libstdc++6:i386 libgcc1:i386 zlib1g:i386 libncurses5:i386
        else
            apt-get install -y libncurses5
        fi
        apt autoremove -y
    fi
    arm="abootimg cgpt fake-hwclock ntpdate u-boot-tools vboot-utils vboot-kernel-utils"
    base="btrfs-tools e2fsprogs initramfs-tools kali-defaults kali-menu laptop-mode-tools parted sudo usbutils cryptsetup aptitude htop lshw mc"
    desktop="alsa-utils alsamixergui fonts-croscore fonts-crosextra-caladea fonts-crosextra-carlito gnome-theme-kali gtk3-engines-xfce kali-desktop-xfce kali-root-login lightdm network-manager network-manager-gnome xfce4 xserver-xorg-video-fbdev xserver-xorg-input-synaptics xserver-xorg-input-all xserver-xorg-input-libinput"
    tools="aircrack-ng ethtool hydra john libnfc-bin mfoc nmap passing-the-hash sqlmap usbutils winexe wireshark"
    services="apache2 openssh-server"
    extras="iceweasel xfce4-terminal wpasupplicant firmware-linux firmware-linux-nonfree mesa-utils mesa-utils-extra mesa-va-drivers mesa-vdpau-drivers flashrom"
    builds="make gcc g++ binutils libncurses5 libncurses5-dev flex mesa-opencl-icd"
    packages="${arm} ${base} ${desktop} ${tools} ${services} ${extras} badpackagetest"
    # Set this to use an http proxy, like apt-cacher-ng, and uncomment further down
    # to unset it.
    #export http_proxy="http://localhost:3142/"
    mkdir -p ${basedir}
    cd ${basedir}
    debootstrap --foreign --arch $architecture kali-rolling kali-$architecture http://$mirror/kali
    cp /usr/bin/qemu-arm-static kali-$architecture/usr/bin/
    LANG=C chroot kali-$architecture /debootstrap/debootstrap --second-stage
    # Create sources.list
cat << EOF > kali-$architecture/etc/apt/sources.list
deb http://$mirror/kali kali-rolling main contrib non-free
EOF
    # Set hostname
    echo "kali" > kali-$architecture/etc/hostname
    # So X doesn't complain, we add kali to hosts
cat << EOF > kali-$architecture/etc/hosts
127.0.0.1       kali    localhost
::1             localhost ip6-localhost ip6-loopback
fe00::0         ip6-localnet
ff00::0         ip6-mcastprefix
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters
EOF
cat << EOF > kali-$architecture/etc/network/interfaces
auto lo
iface lo inet loopback
EOF
cat << EOF > kali-$architecture/etc/resolv.conf
nameserver 1.1.1.1
EOF
    export MALLOC_CHECK_=0 # workaround for LP: #520465
    export LC_ALL=C
    export DEBIAN_FRONTEND=noninteractive
    mount -t proc proc kali-$architecture/proc
    mount -o bind /dev/ kali-$architecture/dev/
    mount -o bind /dev/pts kali-$architecture/dev/pts
cat << EOF > kali-$architecture/debconf.set
console-common console-data/keymap/policy select Select keymap from full list
console-common console-data/keymap/full select en-latin1-nodeadkeys
EOF
	tmpvar1='$(grep -xq $i /tmp/aptlist)'
	paclist='$paclist'
	i='$i'
cat << EOF > kali-$architecture/third-stage
#!/bin/bash
dpkg-divert --add --local --divert /usr/sbin/invoke-rc.d.chroot --rename /usr/sbin/invoke-rc.d
cp /bin/true /usr/sbin/invoke-rc.d
echo -e "#!/bin/sh\nexit 101" > /usr/sbin/policy-rc.d
chmod +x /usr/sbin/policy-rc.d

apt-get update
apt-get --yes --force-yes install locales-all

debconf-set-selections /debconf.set
rm -f /debconf.set
apt-get update
apt-get -y install git-core binutils ca-certificates initramfs-tools u-boot-tools
apt-get -y install locales console-common less nano git
echo "root:toor" | chpasswd
sed -i -e 's/KERNEL\!=\"eth\*|/KERNEL\!=\"/' /lib/udev/rules.d/75-persistent-net-generator.rules
rm -f /etc/udev/rules.d/70-persistent-net.rules
export DEBIAN_FRONTEND=noninteractive

## check and remove from install list unavailable packages
paclist=""
LANG=C apt list | sed 's/\/.*//g' >/tmp/aptlist
for i in $packages; do
	if $tmpvar1; then 
		paclist+="$i "
	else 
		echo $i " is unavailable, it will be ignored during install"
	fi
done

rm -f /tmp/aptlist
apt-get --yes --force-yes install $paclist
apt-get --yes --force-yes dist-upgrade
apt-get --yes --force-yes autoremove

rm -f /usr/sbin/policy-rc.d
rm -f /usr/sbin/invoke-rc.d
dpkg-divert --remove --rename /usr/sbin/invoke-rc.d

rm -f /third-stage
EOF
    chmod +x kali-$architecture/third-stage
    LANG=C chroot kali-$architecture /third-stage
cat << EOF > kali-$architecture/cleanup
#!/bin/bash
rm -rf /root/.bash_history
apt-get update
apt-get clean
rm -f /0
rm -f /hs_err*
rm -f cleanup
rm -f /usr/bin/qemu*
EOF
    chmod +x kali-$architecture/cleanup
    LANG=C chroot kali-$architecture /cleanup
    umount kali-$architecture/proc/sys/fs/binfmt_misc
    umount kali-$architecture/dev/pts
    umount kali-$architecture/dev/
    umount kali-$architecture/proc
else
    umount /dev/mapper/loop0p2
    umount ${basedir}/root
    rm -rf ${basedir}/root
    rm -f ${basedir}/kali-$1-exynos.img
    rm -f ${basedir}/kernel.bin
    cd ${basedir}
fi
## final stages
echo "Creating image file for Exynos-based Samsung XE303C12 Chromebook"
dd if=/dev/zero of=${basedir}/kali-$1-exynos.img bs=1M count=$dis
parted kali-$1-exynos.img --script -- mklabel gpt
cgpt create -z kali-$1-exynos.img
cgpt create kali-$1-exynos.img
cgpt add -i 1 -t kernel -b 8192 -s 32768 -l kernel -S 1 -T 5 -P 10 kali-$1-exynos.img
cgpt add -i 2 -t data -b 40960 -s `expr $(cgpt show kali-$1-exynos.img | grep 'Sec GPT table' | awk '{ print \$1 }')  - 40960` -l Root kali-$1-exynos.img
loopdevice=`losetup -f --show ${basedir}/kali-$1-exynos.img`
device=`kpartx -va $loopdevice| sed -E 's/.*(loop[0-9])p.*/\1/g' | head -1`
sleep 5
device="/dev/mapper/${device}"
bootp=${device}p1
rootp=${device}p2
mkfs.ext4 -O ^flex_bg -O ^metadata_csum -L rootfs $rootp
mkdir -p ${basedir}/root
mount $rootp ${basedir}/root
rootuuid=$(LANG=C blkid | grep 'LABEL="rootfs"' | sed 's/" T.*//g' | sed 's/.*="//g')
echo "Rsyncing rootfs into image file"
rsync -HPavz -q ${basedir}/kali-$architecture/ ${basedir}/root/
cat << EOF > ${basedir}/root/etc/apt/sources.list
deb http://http.kali.org/kali kali-rolling main contrib non-free
deb-src http://http.kali.org/kali kali-rolling main contrib non-free
EOF
cat << EOF> ${basedir}/root/etc/fstab
# /etc/fstab: static file system information.
#
# Use 'blkid' to print the universally unique identifier for a
# device; this may be used with UUID= as a more robust way to name devices
# that works even if disks are added and removed. See fstab(5).
#
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
# / was on /dev/sda2 during installation
UUID=$rootuuid /               ext4    noatime 0       1
# swap was on /dev/sdaX during installation
#UUID= none            swap    sw              0       0
#/dev/sr0        /media/cdrom0   udf,iso9660 user,noauto     0       0
EOF
if [ -z "$5" ]; then
	export CROSS_COMPILE=arm-linux-gnueabihf-
else
	export CROSS_COMPILE="$5"
fi
export ARCH=arm
if $(echo $2 | grep rc -q); then
	git clone https://github.com/torvalds/linux ${basedir}/linux
	rm -rf ${basedir}/linux/.git
	cp -r ${basedir}/linux ${basedir}/root/usr/src/kernel
	rm -rf ${basedir}/linux
	cd ${basedir}/root/usr/src/kernel
	cp ${basedir}/../config .config
	make menuconfig
elif $(echo $2 | grep p -q); then
	git clone --depth 1 https://chromium.googlesource.com/chromiumos/third_party/kernel -b release-${kernel_release} ${basedir}/kernel
	rm -rf ${basedir}/kernel/.git
	cp -r ${basedir}/kernel ${basedir}/root/usr/src/kernel
	rm -rf ${basedir}/kernel
	cd ${basedir}/root/usr/src/kernel
	cp ${basedir}/../config_p .config
	cp ${basedir}/../peach.patch peach.patch
	patch -p1 <peach.patch
else
	tar xf /usr/src/linux*tar.xz -C ${basedir}/root/usr/src/
	cp -r ${basedir}/root/usr/src/linux* ${basedir}/root/usr/src/kernel
	rm -rf ${basedir}/root/usr/src/linux*
	cd ${basedir}/root/usr/src/kernel
	cp ${basedir}/../config .config
fi
# make menuconfig
make -j$(($(grep -c processor /proc/cpuinfo)+1)) zImage modules dtbs
make modules_install INSTALL_MOD_PATH=${basedir}/root
make headers_install INSTALL_HDR_PATH=${basedir}/root
cp .config ${basedir}/../config_w
cd ${basedir}/root/usr/src/kernel/arch/arm/boot
if $(echo $2 | grep p -q); then
cat << __EOF__ > ${basedir}/root/usr/src/kernel/arch/arm/boot/kernel-exynos.its
/dts-v1/;
 
/ {
    description = "Chrome OS kernel image with one or more FDT blobs";
    images {
        kernel@1{
            description = "kernel";
            data = /incbin/("zImage");
            type = "kernel_noload";
            arch = "arm";
            os = "linux";
            compression = "none";
            load = <0>;
            entry = <0>;
        };
        fdt@1{
            description = "exynos5250-snow-rev4.dtb";
            data = /incbin/("dts/exynos5250-snow-rev4.dtb");
            type = "flat_dt";
            arch = "arm";
            compression = "none";
            hash@1{
                algo = "sha1";
            };
        };
        fdt@2{
            description = "exynos5250-snow-rev5.dtb";
            data = /incbin/("dts/exynos5250-snow-rev5.dtb");
            type = "flat_dt";
            arch = "arm";
            compression = "none";
            hash@1{
                algo = "sha1";
            };
        };
    };
    configurations {
        default = "conf@1";
        conf@1{
            kernel = "kernel@1";
            fdt = "fdt@1";
        };
        conf@2{
            kernel = "kernel@1";
            fdt = "fdt@2";
        };
    };
};

__EOF__
echo 'noinitrd console=tty1 quiet root=PARTUUID=%U/PARTNROFF=1 rootwait rw lsm.module_locking=0 net.ifnames=0 rootfstype=ext4' > cmdline
else
cat << __EOF__ > ${basedir}/root/usr/src/kernel/arch/arm/boot/kernel-exynos.its
/dts-v1/;
 
/ {
    description = "Chrome OS kernel image with one or more FDT blobs";
    images {
        kernel@1{
            description = "kernel";
            data = /incbin/("zImage");
            type = "kernel_noload";
            arch = "arm";
            os = "linux";
            compression = "none";
            load = <0>;
            entry = <0>;
        };
        fdt@1{
            description = "exynos5250-snow.dtb";
            data = /incbin/("dts/exynos5250-snow.dtb");
            type = "flat_dt";
            arch = "arm";
            compression = "none";
            hash@1{
                algo = "sha1";
            };
        };
        fdt@2{
            description = "exynos5250-snow-rev5.dtb";
            data = /incbin/("dts/exynos5250-snow-rev5.dtb");
            type = "flat_dt";
            arch = "arm";
            compression = "none";
            hash@1{
                algo = "sha1";
            };
        };
    };
    configurations {
        default = "conf@1";
        conf@1{
            kernel = "kernel@1";
            fdt = "fdt@1";
        };
        conf@2{
            kernel = "kernel@1";
            fdt = "fdt@2";
        };
    };
};

__EOF__
echo 'noinitrd console=tty1 quiet root=PARTUUID=%U/PARTNROFF=1 rootwait rw lsm.module_locking=0 net.ifnames=0 rootfstype=ext4 zswap.compressor=lzo zswap.max_pool_percent=20 elevator=bfq' > cmdline
fi
mkimage -D "-I dts -O dtb -p 2048" -f kernel-exynos.its exynos-kernel
# Pulled from ChromeOS, this is exactly what they do because there's no
# bootloader in the kernel partition on ARM.
dd if=/dev/zero of=bootloader.bin bs=512 count=1
vbutil_kernel --arch arm --pack ${basedir}/kernel.bin --keyblock /usr/share/vboot/devkeys/kernel.keyblock --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk --version 1 --config cmdline --bootloader bootloader.bin --vmlinuz exynos-kernel
cd ${basedir}/root/usr/src/kernel/
make mrproper
cp ${basedir}/../config_w .config
rm -f ${basedir}/../config_w
make modules_prepare
cd ${basedir}
# Fix up the symlink for building external modules
# kernver is used so we don't need to keep track of what the current compiled
# version is
kernver=$(ls ${basedir}/root/lib/modules/)
cd ${basedir}/root/lib/modules/$kernver
rm build
rm source
ln -s /usr/src/kernel build
ln -s /usr/src/kernel source
cd ${basedir}
# Bit of a hack to hide eMMC partitions from XFCE
#cat << EOF > ${basedir}/root/etc/udev/rules.d/99-hide-emmc-partitions.rules
#KERNEL=="mmcblk0*", ENV{UDISKS_IGNORE}="1"
#EOF
# Disable uap0 and p2p0 interfaces in NetworkManager
printf '\n[keyfile]\nunmanaged-devices=interface-name:p2p0\n' >> ${basedir}/root/etc/NetworkManager/NetworkManager.conf
# Touchpad configuration
mkdir -p ${basedir}/root/etc/X11/xorg.conf.d
cat << EOF > ${basedir}/root/etc/X11/xorg.conf.d/10-synaptics-chromebook.conf
Section "InputClass"
	Identifier		"touchpad"
	MatchIsTouchpad		"on"
	Driver			"synaptics"
	Option			"TapButton1"	"1"
	Option			"TapButton2"	"3"
	Option			"TapButton3"	"2"
	Option			"FingerLow"	"15"
	Option			"FingerHigh"	"20"
	Option			"FingerPress"	"256"
EndSection
EOF
	# Mali GPU rules aka mali-rules package in ChromeOS
cat << EOF > ${basedir}/root/etc/udev/rules.d/50-mali.rules
KERNEL=="mali0", MODE="0660", GROUP="video"
EOF
	# Video rules aka media-rules package in ChromeOS
cat << EOF > ${basedir}/root/etc/udev/rules.d/50-media.rules
ATTR{name}=="s5p-mfc-dec", SYMLINK+="video-dec"
ATTR{name}=="s5p-mfc-enc", SYMLINK+="video-enc"
ATTR{name}=="s5p-jpeg-dec", SYMLINK+="jpeg-dec"
ATTR{name}=="exynos-gsc.0*", SYMLINK+="image-proc0"
ATTR{name}=="exynos-gsc.1*", SYMLINK+="image-proc1"
ATTR{name}=="exynos-gsc.2*", SYMLINK+="image-proc2"
ATTR{name}=="exynos-gsc.3*", SYMLINK+="image-proc3"
EOF
if $(echo $2 | grep p -q); then
	# This is for Peach - kinda a hack, never really worked properly they say.
	# Ambient light sensor
	echo '#!/bin/sh'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo ''>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo '# Copyright (c) 2012 The Chromium OS Authors. All rights reserved.'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo '# Use of this source code is governed by a BSD-style license that can be'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo '# found in the LICENSE file.'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo ''>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo '# In iio/devices, find device0 on 3.0.x kernels and iio:device0 on 3.2 kernels.'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo 'for FILE in /sys/bus/iio/devices/*/in_illuminance0_calibscale; do'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo '  # Set the light sensor calibration value.'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo '  echo 5.102040 > $FILE && break;'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo 'done'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo ''>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo 'for FILE in /sys/bus/iio/devices/*/in_illuminance1_calibscale; do'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo '  # Set the IR compensation calibration value.'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo '  echo 0.053425 > $FILE && break;'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo 'done'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo ''>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo 'for FILE in /sys/bus/iio/devices/*/range; do'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo '  # Set the light sensor range value (max lux)'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo '  echo 16000 > $FILE && break;'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo 'done'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo ''>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo 'for FILE in /sys/bus/iio/devices/*/continuous; do'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo '  # Change the measurement mode to the continuous mode'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo '  echo als > $FILE && break;'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
	echo 'done'>>${basedir}/root/lib/udev/light-sensor-set-multiplier.sh
cat << EOF > ${basedir}/root/lib/udev/rules.d/99-light-sensor.rules
# Calibrate the light sensor when the isl29018 driver is installed.
ACTION=="add", SUBSYSTEM=="drivers", KERNEL=="isl29018", RUN+="light-sensor-set-multiplier.sh"
EOF
	echo "#!/bin/sh">>${basedir}/root/etc/init.d/zram
	echo "### BEGIN INIT INFO">>${basedir}/root/etc/init.d/zram
	echo "# Provides:          zram">>${basedir}/root/etc/init.d/zram
	echo '# Required-Start:    $local_fs'>>${basedir}/root/etc/init.d/zram
	echo '# Required-Stop:     $local_fs'>>${basedir}/root/etc/init.d/zram
	echo "# Default-Start:     S">>${basedir}/root/etc/init.d/zram
	echo "# Default-Stop:      0 1 6">>${basedir}/root/etc/init.d/zram
	echo "# Short-Description: Use compressed RAM as in-memory swap">>${basedir}/root/etc/init.d/zram
	echo "# Description:       Use compressed RAM as in-memory swap">>${basedir}/root/etc/init.d/zram
	echo "### END INIT INFO">>${basedir}/root/etc/init.d/zram
	echo "">>${basedir}/root/etc/init.d/zram
	echo "# Author: Antonio Galea <antonio.galea@gmail.com>">>${basedir}/root/etc/init.d/zram
	echo "# Thanks to Przemysław Tomczyk for suggesting swapoff parallelization">>${basedir}/root/etc/init.d/zram
	echo "">>${basedir}/root/etc/init.d/zram
	echo "FRACTION=75">>${basedir}/root/etc/init.d/zram
	echo "">>${basedir}/root/etc/init.d/zram
	echo "MEMORY="'`'"perl -ne'/^MemTotal:\s+(\d+)/ && print"' $1*1024;'"'"' < /proc/meminfo''`'>>${basedir}/root/etc/init.d/zram
	echo 'CPUS=`grep -c processor /proc/cpuinfo`'>>${basedir}/root/etc/init.d/zram
	echo 'SIZE=$(( MEMORY * FRACTION / 100 / CPUS ))'>>${basedir}/root/etc/init.d/zram
	echo "">>${basedir}/root/etc/init.d/zram
	echo 'case "$1" in'>>${basedir}/root/etc/init.d/zram
	echo '  "start")'>>${basedir}/root/etc/init.d/zram
	echo '    param=`modinfo zram|grep num_devices|cut -f2 -d:|tr -d'" ' '"'`'>>${basedir}/root/etc/init.d/zram
	echo '    modprobe zram $param=$CPUS'>>${basedir}/root/etc/init.d/zram
	echo '    for n in `seq $CPUS`; do'>>${basedir}/root/etc/init.d/zram
	echo '      i=$((n - 1))'>>${basedir}/root/etc/init.d/zram
	echo '      echo $SIZE > /sys/block/zram$i/disksize'>>${basedir}/root/etc/init.d/zram
	echo '      mkswap /dev/zram$i'>>${basedir}/root/etc/init.d/zram
	echo '      swapon /dev/zram$i -p 10'>>${basedir}/root/etc/init.d/zram
	echo "    done">>${basedir}/root/etc/init.d/zram
	echo "    ;;">>${basedir}/root/etc/init.d/zram
	echo '  "stop")'>>${basedir}/root/etc/init.d/zram
	echo '    for n in `seq $CPUS`; do'>>${basedir}/root/etc/init.d/zram
	echo '      i=$((n - 1))'>>${basedir}/root/etc/init.d/zram
	echo '      swapoff /dev/zram$i && echo "disabled disk $n of $CPUS" &'>>${basedir}/root/etc/init.d/zram
	echo '    done'>>${basedir}/root/etc/init.d/zram
	echo '    wait'>>${basedir}/root/etc/init.d/zram
	echo '    sleep .5'>>${basedir}/root/etc/init.d/zram
	echo '    modprobe -r zram'>>${basedir}/root/etc/init.d/zram
	echo '    ;;'>>${basedir}/root/etc/init.d/zram
	echo '  *)'>>${basedir}/root/etc/init.d/zram
	echo '    echo "Usage: `basename $0` (start | stop)"'>>${basedir}/root/etc/init.d/zram
	echo '    exit 1'>>${basedir}/root/etc/init.d/zram
	echo '    ;;'>>${basedir}/root/etc/init.d/zram
	echo 'esac'>>${basedir}/root/etc/init.d/zram
	echo ''>>${basedir}/root/etc/init.d/zram
	chmod +x ${basedir}/root/etc/init.d/zram
fi
rm -rf ${basedir}/root/lib/firmware
cd ${basedir}/root/lib
git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git firmware
rm -rf ${basedir}/root/lib/firmware/.git
cd ${basedir}
sed -i -e 's/^#PermitRootLogin.*/PermitRootLogin yes/' ${basedir}/root/etc/ssh/sshd_config
# Unmount partitions
umount $rootp
dd if=${basedir}/kernel.bin of=$bootp
kpartx -dv $loopdevice
losetup -d $loopdevice
echo '
if all complete without errors you can write result image with dd, for example:
dd if=kali-exynos-"version number"/kali-"version number"-exynos.img \
of=/dev/"flash stick" bs=8M status=progress

Be aware! Wrong /dev/"flash stick" can permanently destroy data on hard drives!
'
# Clean up all the temporary build stuff and remove the directories will be not done
# It allow rebuild kernel and/or image without redownload arm packages
# if you need remove it, do it manually
#echo "Removing temporary build files"
#rm -rf ${basedir}/kernel ${basedir}/kernel.bin ${basedir}/root ${basedir}/kali-$architecture ${basedir}/patches ${basedir}/bootloader.bin
